/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.amf.registration.sb.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.docs.amf.registration.sb.model.AmfRegistration;
import com.liferay.docs.amf.registration.sb.service.AmfRegistrationLocalService;
import com.liferay.docs.amf.registration.sb.service.persistence.AmfRegistrationAuditLogPersistence;
import com.liferay.docs.amf.registration.sb.service.persistence.AmfRegistrationFinder;
import com.liferay.docs.amf.registration.sb.service.persistence.AmfRegistrationPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.AddressPersistence;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.PhonePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the amf registration local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.docs.amf.registration.sb.service.impl.AmfRegistrationLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.docs.amf.registration.sb.service.impl.AmfRegistrationLocalServiceImpl
 * @see com.liferay.docs.amf.registration.sb.service.AmfRegistrationLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class AmfRegistrationLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements AmfRegistrationLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.docs.amf.registration.sb.service.AmfRegistrationLocalServiceUtil} to access the amf registration local service.
	 */

	/**
	 * Adds the amf registration to the database. Also notifies the appropriate model listeners.
	 *
	 * @param amfRegistration the amf registration
	 * @return the amf registration that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AmfRegistration addAmfRegistration(AmfRegistration amfRegistration) {
		amfRegistration.setNew(true);

		return amfRegistrationPersistence.update(amfRegistration);
	}

	/**
	 * Creates a new amf registration with the primary key. Does not add the amf registration to the database.
	 *
	 * @param dummy the primary key for the new amf registration
	 * @return the new amf registration
	 */
	@Override
	public AmfRegistration createAmfRegistration(long dummy) {
		return amfRegistrationPersistence.create(dummy);
	}

	/**
	 * Deletes the amf registration with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dummy the primary key of the amf registration
	 * @return the amf registration that was removed
	 * @throws PortalException if a amf registration with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AmfRegistration deleteAmfRegistration(long dummy)
		throws PortalException {
		return amfRegistrationPersistence.remove(dummy);
	}

	/**
	 * Deletes the amf registration from the database. Also notifies the appropriate model listeners.
	 *
	 * @param amfRegistration the amf registration
	 * @return the amf registration that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AmfRegistration deleteAmfRegistration(
		AmfRegistration amfRegistration) {
		return amfRegistrationPersistence.remove(amfRegistration);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(AmfRegistration.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return amfRegistrationPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.amf.registration.sb.model.impl.AmfRegistrationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return amfRegistrationPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.amf.registration.sb.model.impl.AmfRegistrationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return amfRegistrationPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return amfRegistrationPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return amfRegistrationPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public AmfRegistration fetchAmfRegistration(long dummy) {
		return amfRegistrationPersistence.fetchByPrimaryKey(dummy);
	}

	/**
	 * Returns the amf registration with the primary key.
	 *
	 * @param dummy the primary key of the amf registration
	 * @return the amf registration
	 * @throws PortalException if a amf registration with the primary key could not be found
	 */
	@Override
	public AmfRegistration getAmfRegistration(long dummy)
		throws PortalException {
		return amfRegistrationPersistence.findByPrimaryKey(dummy);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(amfRegistrationLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AmfRegistration.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("dummy");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(amfRegistrationLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(AmfRegistration.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("dummy");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(amfRegistrationLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AmfRegistration.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("dummy");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return amfRegistrationLocalService.deleteAmfRegistration((AmfRegistration)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return amfRegistrationPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the amf registrations.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.docs.amf.registration.sb.model.impl.AmfRegistrationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of amf registrations
	 * @param end the upper bound of the range of amf registrations (not inclusive)
	 * @return the range of amf registrations
	 */
	@Override
	public List<AmfRegistration> getAmfRegistrations(int start, int end) {
		return amfRegistrationPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of amf registrations.
	 *
	 * @return the number of amf registrations
	 */
	@Override
	public int getAmfRegistrationsCount() {
		return amfRegistrationPersistence.countAll();
	}

	/**
	 * Updates the amf registration in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param amfRegistration the amf registration
	 * @return the amf registration that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AmfRegistration updateAmfRegistration(
		AmfRegistration amfRegistration) {
		return amfRegistrationPersistence.update(amfRegistration);
	}

	/**
	 * Returns the amf registration local service.
	 *
	 * @return the amf registration local service
	 */
	public AmfRegistrationLocalService getAmfRegistrationLocalService() {
		return amfRegistrationLocalService;
	}

	/**
	 * Sets the amf registration local service.
	 *
	 * @param amfRegistrationLocalService the amf registration local service
	 */
	public void setAmfRegistrationLocalService(
		AmfRegistrationLocalService amfRegistrationLocalService) {
		this.amfRegistrationLocalService = amfRegistrationLocalService;
	}

	/**
	 * Returns the amf registration persistence.
	 *
	 * @return the amf registration persistence
	 */
	public AmfRegistrationPersistence getAmfRegistrationPersistence() {
		return amfRegistrationPersistence;
	}

	/**
	 * Sets the amf registration persistence.
	 *
	 * @param amfRegistrationPersistence the amf registration persistence
	 */
	public void setAmfRegistrationPersistence(
		AmfRegistrationPersistence amfRegistrationPersistence) {
		this.amfRegistrationPersistence = amfRegistrationPersistence;
	}

	/**
	 * Returns the amf registration finder.
	 *
	 * @return the amf registration finder
	 */
	public AmfRegistrationFinder getAmfRegistrationFinder() {
		return amfRegistrationFinder;
	}

	/**
	 * Sets the amf registration finder.
	 *
	 * @param amfRegistrationFinder the amf registration finder
	 */
	public void setAmfRegistrationFinder(
		AmfRegistrationFinder amfRegistrationFinder) {
		this.amfRegistrationFinder = amfRegistrationFinder;
	}

	/**
	 * Returns the amf registration audit log local service.
	 *
	 * @return the amf registration audit log local service
	 */
	public com.liferay.docs.amf.registration.sb.service.AmfRegistrationAuditLogLocalService getAmfRegistrationAuditLogLocalService() {
		return amfRegistrationAuditLogLocalService;
	}

	/**
	 * Sets the amf registration audit log local service.
	 *
	 * @param amfRegistrationAuditLogLocalService the amf registration audit log local service
	 */
	public void setAmfRegistrationAuditLogLocalService(
		com.liferay.docs.amf.registration.sb.service.AmfRegistrationAuditLogLocalService amfRegistrationAuditLogLocalService) {
		this.amfRegistrationAuditLogLocalService = amfRegistrationAuditLogLocalService;
	}

	/**
	 * Returns the amf registration audit log persistence.
	 *
	 * @return the amf registration audit log persistence
	 */
	public AmfRegistrationAuditLogPersistence getAmfRegistrationAuditLogPersistence() {
		return amfRegistrationAuditLogPersistence;
	}

	/**
	 * Sets the amf registration audit log persistence.
	 *
	 * @param amfRegistrationAuditLogPersistence the amf registration audit log persistence
	 */
	public void setAmfRegistrationAuditLogPersistence(
		AmfRegistrationAuditLogPersistence amfRegistrationAuditLogPersistence) {
		this.amfRegistrationAuditLogPersistence = amfRegistrationAuditLogPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the address local service.
	 *
	 * @return the address local service
	 */
	public com.liferay.portal.kernel.service.AddressLocalService getAddressLocalService() {
		return addressLocalService;
	}

	/**
	 * Sets the address local service.
	 *
	 * @param addressLocalService the address local service
	 */
	public void setAddressLocalService(
		com.liferay.portal.kernel.service.AddressLocalService addressLocalService) {
		this.addressLocalService = addressLocalService;
	}

	/**
	 * Returns the address persistence.
	 *
	 * @return the address persistence
	 */
	public AddressPersistence getAddressPersistence() {
		return addressPersistence;
	}

	/**
	 * Sets the address persistence.
	 *
	 * @param addressPersistence the address persistence
	 */
	public void setAddressPersistence(AddressPersistence addressPersistence) {
		this.addressPersistence = addressPersistence;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the phone local service.
	 *
	 * @return the phone local service
	 */
	public com.liferay.portal.kernel.service.PhoneLocalService getPhoneLocalService() {
		return phoneLocalService;
	}

	/**
	 * Sets the phone local service.
	 *
	 * @param phoneLocalService the phone local service
	 */
	public void setPhoneLocalService(
		com.liferay.portal.kernel.service.PhoneLocalService phoneLocalService) {
		this.phoneLocalService = phoneLocalService;
	}

	/**
	 * Returns the phone persistence.
	 *
	 * @return the phone persistence
	 */
	public PhonePersistence getPhonePersistence() {
		return phonePersistence;
	}

	/**
	 * Sets the phone persistence.
	 *
	 * @param phonePersistence the phone persistence
	 */
	public void setPhonePersistence(PhonePersistence phonePersistence) {
		this.phonePersistence = phonePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.docs.amf.registration.sb.model.AmfRegistration",
			amfRegistrationLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.docs.amf.registration.sb.model.AmfRegistration");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return AmfRegistrationLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return AmfRegistration.class;
	}

	protected String getModelClassName() {
		return AmfRegistration.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = amfRegistrationPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = AmfRegistrationLocalService.class)
	protected AmfRegistrationLocalService amfRegistrationLocalService;
	@BeanReference(type = AmfRegistrationPersistence.class)
	protected AmfRegistrationPersistence amfRegistrationPersistence;
	@BeanReference(type = AmfRegistrationFinder.class)
	protected AmfRegistrationFinder amfRegistrationFinder;
	@BeanReference(type = com.liferay.docs.amf.registration.sb.service.AmfRegistrationAuditLogLocalService.class)
	protected com.liferay.docs.amf.registration.sb.service.AmfRegistrationAuditLogLocalService amfRegistrationAuditLogLocalService;
	@BeanReference(type = AmfRegistrationAuditLogPersistence.class)
	protected AmfRegistrationAuditLogPersistence amfRegistrationAuditLogPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.AddressLocalService.class)
	protected com.liferay.portal.kernel.service.AddressLocalService addressLocalService;
	@ServiceReference(type = AddressPersistence.class)
	protected AddressPersistence addressPersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.PhoneLocalService.class)
	protected com.liferay.portal.kernel.service.PhoneLocalService phoneLocalService;
	@ServiceReference(type = PhonePersistence.class)
	protected PhonePersistence phonePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}